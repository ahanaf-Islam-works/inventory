generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Main Working Models
enum Role {
  Admin
  Manager
  Employee
}

model User {
  id       String  @id @default(cuid())
  name     String?
  username String? @unique

  password String @default("firstTimeLogin")

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  role Role @default(Employee)

  online Boolean @default(false)

  admin    Admin?
  manager  Manager?
  employee Employee?

  attendances Attendance[]
  positions   Position[]
}

model Admin {
  id     String @id @default(cuid())
  name   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  managers  Manager[]
  employees Employee[]
}

model Manager {
  id     String @id @default(cuid())
  name   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  employees Employee[]
}

model Employee {
  id   String @id @default(cuid())
  name String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  manager   Manager @relation(fields: [managerId], references: [id])
  managerId String

  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  works Work[]
}

model Work {
  id String @id @default(cuid())

  name String

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String

  date      DateTime
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id String @id @default(cuid())

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  date  DateTime
  hours Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id String @id @default(cuid())

  name String

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
